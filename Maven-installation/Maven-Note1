Git Best Practices:
   1. Use best branching strategy and pull requests in coding 
   2. Commit once you finish your developing a task . 
   3. Avoid merge Conflicts.
        devBranch dc1--dc2--dc3
        stageBranch sc1--sc2 && git merge devBranch
        stageBranch git merge devBranch && sc1--sc2 
   4. Don’t Commit Half-Done CODE - git stash
   5. Test your code before committing.
       echo "what is your Name"
       read name 
   5. Write Good Commit Messages before committing -- 
       enhances your code quality 
   6. Try to use git commands rather than GUI tools (github).
       git commit -m "my First commit"
   7. use ssh url and PAT over https and password
   8. use rebase over git merge

git :
  Creating repositories
  CLONING repositories --- CLI  
     git clone repoName 
  FORK repositories --> gui 
     getting a copy of the codes from one git account to another 
     
Maven:
Lesson 3. Build Tools:  Maven (Jan 27)
o	• Introduction 
o	• Features & Benefits of Maven 
o	• Installation (Maven Environment Setup) 
o	• Directory Structure 
o	• Content of pom.xml 
o	• Maven Repositories 
o	• Maven Life Cycles 
o	• Executing some Examples 
o	• Maven Multi Modules 
	Parent pom 
	Child pom 
	Maven Profiles
Build Tools:  
===========
  SDLC-->
Devops Process:
  Devops--> Coding --> Build --> Testing--> Deployed  
            Coding --> Testing--> Build -->  Deployed 

  Used to create Java packages for deployment  -- Tomcat

  use to create deployable packages  
     raw code + build = packages that the deployment servers can interpretes 

What kind of projects are you supporting in RondusTech?

JAVA  = We support java based projects
          and a few .NET projects
        We support apps written in java,.NET, NodeJS by developers 
  java, .NET, NodeJS is a programming language
--------------------------------------
JAVA:
  ANt   ---- build.xml
    1000Lines with ANt 
    400LINES WITH MAVEN
  Maven  --- pom.xml
  Gradle  -- build.gradle
  gitHub projectRepo_TD :
      BuildScripts 
      src(sourceCode) 
      unitTestCases

.Net:
----
  Nant
  MSBuild

JAVASCRIPT:
-----------
  Gulp
  Grunt
  
Python:
-------
  PyBuilder

Ruby:
----
  Rake

NodeJS:
  npm
==== 
Maven Build Tools:
-----------------
https://maven.apache.org/download.cgi

MAVEN = is an open source Java BASED 
          Build  tool

Any software is available is three options:

Free: - software is given for free 
         without source code

Licence: The software is paid for

Open source: - Implying  both the software and 
      the source code are freely available.      
    You can download the source code and 
    develop on the existing features
IQ: Explain you experience in open source technologies? 

  Share 



Linux  : 
  RedHat = RedHat  (IBM)   
  CentOS = 
  Ubuntu = ubuntu 
  Amazon Linu = Amazon 
===
Build means: 
  compiling and creating deployable packages from codes.
  Hello.java  --> 
  hello.py    --> 

javac Hello.java  ---> 
jvm = Java Virtual Machine 
----
Maven installation:
  Maven can be installed in Any platform 
    Linux -- 
      RedHat / Ubuntu / CentOS
    Windows
      server2012/2016/2019 
      windows XP/7/8/10 /11
    MacOS 
    Solaris

2. Java is a pre-requisite for maven to run 
    JRE --> JAVA RUNTIME ENVIRONMENT
    JDK --> JAVA DEVELOPMENT KIT 1.8+
            JVM will also be installed

3. PUBLICip = 44.203.69.102
   userName = ec2-user 
   authentication = ssh_private_key = c27.pem 
===============================================
Maven Home Directory = MHD  (/opt/maven) = /app/maven)
  This is where maven software is downloaded and extracted 
   wget https://dlcdn.apache.org/maven/maven-3/3.8.3.zip 
   uzip 
 
 MHD = /opt/maven 
 ==========
   bin -- binary files / commands
          mvn    
   conf -- configuration files 
           settings.xml
   lib  -- jar files  
   LICENSE  
   NOTICE  
   README.txt
--
    hello.java  
      [Hello, Welcome to Landmark]

  where Hello.java is the src code with java extension 
        hello.py
  where Hello.py is the src code with python extension

 javac hello.java 

  where javac is the command to use to compile java classes
  This will generate byte code that jvm can understand and compile 
   jvm = java Virtual machine 

    hello.class 
      [0101010214]  JVM 
       hello.Class --> Byte code -- machine readable code 

     [Hello, Welcome to RondusTech] Human readable code 

maven: creates packages (jar, war and/OR ear)
  jar: Standalone Applications
    ebay.jar
    paypal.jar
    rbc.jar 
  war: web Applications
    boa.war
    rbc.war
  ear: Enterprise Applications
    aa.ear 
    boa.ear
    td.ear  
Archieves:
  file.zip = unzip
  file.gz.tar
  td.ear 
  td.jar 
  td.war  
Standalone Applications – *.jar  Java Archieve
=============================================
 java code ONLY   
    contains only java classes
    jar = .classfiles
    maven-stanalone-application.jar

Web Applications  – .war  web Archieve
======================================
Java code + 
web content (HTML, CSS, JS, images…,) 
Backend code   - frontend code

maven-web-application.war

Enterprise applications – .ear –
==================================
 Enterprise Archieve
    Multiple Modules
      Java code + web content 
    Ear =  war(s) + jar(s)
    Banking applications
    maven-web-application.war
    maven-enterprise-application.ear

Based on our project we going to create 
   multiple either;  jar, war or ear packages:
===========================
What are we building?
 we are building java codes:
   src-- source code (raw code)
   Unit-Test-Cases 
      JAVA  --> JUnit test cases 
      .Net  --> NUnit test cases 
      C++  --> CPPUnit test cases 
   buildScripts:  pom.xml
     html     = hyperText mark-up language
               comes with pre-define tags that can't be changed  
        TAGS: h1 h2 h3 p
              <h1>code</h1> 
               <h1>Welcome to Rondus Technologies</h1>
               <server>Welcome to Rondus Technologies</server> error
         
     pom.xml  = extensible mark-up language 
           It doesn't come with pre-define tags that. It's dynamic 
           <id>12457ih</id>
           <name>Simon</name>
            <name>Fotso</name>
            <fruits>mango</fruits>
 java-code:
  src
    Main
      application-code 
    test 
       unit test cases 
  buildScripts
    maven buildScripts is pom.xml 
      xml = extenable mark-up language 

git clone https://github.com/itoroukpe/maven-standalone-application-1
pom.xml : this among others will include

  project dependencies 
  pugins 
  <dependencies>
  <dependency>selenium</dependency>
  <dependency>JUNit</dependency>
  <dependency>log4j</dependency>
  </dependencies> 
   
   <dependency>
    <groupId>log4j</groupId>
    <artifactId>log4j</artifactId>
    <version>1.2.17</version>
</dependency>

<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-api</artifactId>
    <version>5.8.2</version>
    <scope>test</scope>
</dependency>

   Testing = 

   Selenium 
   JUNit 
   log4j
==========

yum install maven -y 
this installs the latest version of maven found in the yum repository 
mvn -version -- 3.6.0 
   This lower version of maven/or any software is likely vulnerable 
   This may not be stable version which is recomended 

yum upgrade (-version -- 3.6.0) 
   Rav4 (2004/2014/2009) 

TOYOTA -- wget --- 2022/2023 

wget maven-3.8.4.zip 
=====================================
Install Java | maven | git
Script for Installation: 
++++++++++++++++++++++++++++++++++++++++++++++
sudo hostname maven
sudo su
cd /opt
yum install wget nano tree unzip git-all -y
yum install java-11-openjdk-devel java-1.8.0-openjdk-devel -y
java -version
git --version

#2. Install Maven.sh
#------------------

#Step1) Download the Maven Software

wget https://dlcdn.apache.org/maven/maven-3/3.8.7/binaries/apache-maven-3.8.7-bin.zip

unzip apache-maven-3.8.7-bin.zip
rm -rf apache-maven-3.8.7-bin.zip
mv apache-maven-3.8.7/ maven

Step3) Set Environmental Variable  -  For Specific User
----------------------
#vi ~/.bash_profile
echo "export M2_HOME=/opt/maven" >>  ~/.bash_profile
echo "export PATH=$PATH:$M2_HOME/bin" >> ~/.bash_profile

<<m2
#Step3b) Set Environmental Variable  For All Users
---------------------- 
echo "export M2_HOME=/opt/maven" >>  /etc/profile
echo "export PATH=$PATH:$M2_HOME/bin" >> /etc/profile

step4) Activate the maven home and mvn by running the below scripts
source /etc/profile

Step5) Check the Maven version
m2

source ~/.bash_profile
mvn -version
++++++++++++++++++++++++++++++++++++++++++

--------------------------
Standalone Applications – app.jar (td.jar)
 micro-services 
Web Applications        – app.war  (boa.war)
Enterprise applications – app.ear  (aa.ear)
-------------------------------------------
Archieves:
  file.zip = unzip
  file.gz.tar
  td.jar
  td.war
  td.ear

Standalone Applications – app.jar  Java Archieve
=========================================
 java code ONLY   
    contains only java classes
    jar = .classfiles
    maven-stanalone-application.jar

Web Applications  – .war  web Archieve
======================================
Java code + 
web content (HTML, CSS, JS, images…,) 
Backend code   - frontend code
maven-web-application.war

Enterprise applications – .ear –
==================================
 Enterprise Archieve
    Multiple Modules
      Java code + web content 
    Ear =  war(s) + jar(s)
    Banking applications
    maven-web-application.war
    maven-enterprise-application.ear

Based on your project we going to create 
   multiple jar war or ear packages:

Maven installations:
  https://maven.apache.org/download.cgi
----------------------------------------
What are we building?
------------------
 we are building java codes:
  src -- source code (raw code)
Unit-Test-Cases
  Java --> Junit Test cases
  .Net --> NUnit test cases
  .C++ --> CPPUnit test cases
BuildScripts:
  pom.xml = extensible mark-up language
  html = hyperText mark-up language
   TAGS: h1 h2 h3
    <tags> code </tag>
    <h1>Welcome to Rondus Technologies</h1>
    
pom.xml = extensible mark-up language
  it doesn't come with a pre-defined tags. It is a dynamic language. 
  <id>123344</id>
  <name>Itee</name>
========================================

 Maven local repository 
   .m2/repository = default 

Maven remote repository 

Maven central repository

====================
sudo yum install maven 
========================

 mvn = command or CLI 
 =======================================
 MAVEN LIFECYCLE
 --------------------
IQ : Explain the maven lifecycle  ??
Maven has 3 lifecycles: 
  Clean, site and default

Lifecycles      Goal(s)
----------      -----   
Clean            clean   (mvn clean)
                   delete old builds 

Site/Swagger     site
                   create java classes (byte code)
                   JVM 

default        mvn validate:
                  It will validate the project structure and resource files
               mvn compile:
                  It will compile all java classes and test cases
               mvn test:
                  It will run the unit test cases (JUNit)
               mvn package:
                  It will create packages in target directory 
                      (*.jar/*.war/*ear) app.war

               mvn install:
                  It will store the build artifacts in MAVEN LOCAL REPO
                     default location: .m2/repository
               
               mvn deploy:  NEXUS
                  It will upload the build artifacts into maven-remote-repo

mvn package: 
  validate
  compile 
  Testing 
  create the packages
------------------------
Maven uses plugins/dependencies in the build Process.
  Where will maven get plugins in the build process?
   FROM  repositories 

Maven local repository 
   ~/.m2/repository = default 
   ls ~/.m2/repository

Maven remote repository 

Maven central repository
  mvn package:
    LOCAL--->Remote --->Central (MCR)
     LSS     LSS       apache-maven

Total time:  6.610 s    MCR
Total time:  1.445 s    MLC

IQ: What problem have you face in your project?
  Maven taking longer than expected time to build.
    Maven-local-repo was accidentally deleted 
            ~/.m2/repository
  We created a custom Maven-local-repo

          /tmp/fintech-mlr
     MHD= 
       conf 
         vi settings.xml
         tag:
          <localRepository>fintech-mlr</localRepository>
          <localRepository>.app/mlr</localRepository>

  comments in xml:
   <!--

   <localRepository>fintech-mlr</localRepository>
   <localRepository>fintech-mlr</localRepository>
   --> 

    <!-- localRepository

 mvn clean package 

  T E S T S
-------------------------------------------------------
Running com.mt.sample.test.HelloWorldTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

mvn package:
  validate -- ok
  compile --> ok
  run tests   passes ok (69990/70000) = 99.99%
  packages are created in the target directory  

  Quality Gates 

IQ:1. Assuming that 699 Testcases passed and 1 fails, 
      what can be done for  maven to still do a build? 
           mvn package -DskipTests

           mvn package -Dmaven.test. skip=true

2. Some  projects are taking long to build how can we resolve the issue:? 
     By skipping the test goal with 
     mvn package -DskipTests 
     or
     mvn package -Dmaven.test. skip=true

pom.xml
  <groupId>com.mt</groupId>
  <artifactId>maven-stanalone-application</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>maven-stanalone-application</name>
pwd:
/home/ec2-user/java-projects/maven-standalone-application

cd /opt/maven/conf
      settings.xml 
         configuration of Maven-local-repo

returning to your projects directory:
  cd - 
  or 
  cd /home/ec2-user/java-projects/maven-standalone-application 
  or
    cd 
    cd java-projects 
    cd maven-standalone-application

  
package:
  maven-stanalone-application-0.0.1-SNAPSHOT.jar


git clone https://github.com/itoroukpe/maven-standalone-application

https://github.com/mylandmarktechs/maven-standalone-application

mvn install:
  validate -- ok
  compile --> ok
  run tests   passes ok 
  Create packages in target 

  store packages in the Maven-local-repo  
------------------------------------------
Explain the d/f b/w mvn package & install:
 Ans:
 - mvn package creates artifacts(packages) in target 
  and will be deleted if we run mvn clean 

 - mvn install creates and install packages in target and MLR. Artifacts in MLR won't be deleted if we run mvn clean.

maven-web-applications:
https://github.com/itoroukpe/maven-web-app
  git clone https://github.com/itoroukpe/maven-web-app

  maven-web-app.war
  boa-app.war
  paypal-app-0.0.1-SNAPSHOT.war
  app.war 
  maven-web-application-0.0.1-SNAPSHOT.war

mvn package 
   Total time:  4.227 s
   Total time:  1.487 s

  <finalName>boa-app</finalName>

Maven Enterprise applications:
  MavenEnterpriseApp-ear.ear
  MavenEnterpriseApplication.war

git clone https://github.com/itoroukpe/maven-enterprise-application

I'm managing federated Enterprise micro-service applications
for a Banking client 
  Enterprise applications with over 21 modules

How can a Specific module be built in maven-enterprise-applications?
       
    mvn  package -pl MavenEnterpriseApp-web
  
    mvn  package -P profilename
      MavenEnterpriseApp-ear  
      MavenEnterpriseApp-web  
      pom.xml

 ${Build_Number}
                        location
   Maven-local-repo   -- maven server
   maven-remote-repo  -- nexus server 
   maven-central-repo -- apache maven 
   Artifacts management:
     Maven-local-repo   -- maven server
     maven-remote-repo  -- nexus server
   Plugins/dependency management:
     Maven-local-repo   -- maven server
     maven-remote-repo  -- nexus server 
     maven-central-repo -- apache maven 

   MAVEN-HOME-DIRECTORY:
      where the maven software is extracted
        bin 
           mvn 
        conf 
           settings.xml
        lib 
        boot 

 How can we trouble-shoot a fail build? 
   Check the logs to understand the Errors 
   mvn -X package (BUILD in debugging mode)
 What is the function of Tomcat -->
 What do we consider in selecting dependencies-->?
     Type of project -- we manage java projects 
                        log4j, JUNit, selenium  



   



